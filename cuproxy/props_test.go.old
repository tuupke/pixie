package main

import (
	"context"
	"fmt"
	"net"
	"net/http"
	"sync"
	"testing"
	"time"

	"github.com/puzpuzpuz/xsync"
	"github.com/stretchr/testify/require"
)

var (
	testIp = net.ParseIP("10.13.37.24")
)

func TestMain(m *testing.M) {
	listener, err := net.Listen("tcp", ":0")
	if err != nil {
		panic(err)
	}
	defer listener.Close()

	WebHook = "http://" + listener.Addr().String()

	mx := http.NewServeMux()
	mx.HandleFunc("/", func(writer http.ResponseWriter, request *http.Request) {
		writer.Header().Add("Content-Type", "Application/JSON")
		fmt.Fprint(writer, `{"key": "value", "foo": "bar"}`)
	})

	go http.Serve(listener, mx)

	m.Run()
}

func TestProsLoading(t *testing.T) {
	ctx := context.Background()

	d := FetchData(ctx, "aaa:4222/aaaa=bbb/cccc=dddd", testIp)
	require.NotNil(t, d)

	fmt.Println(d.fetch(true))
}

func TestWebhook(t *testing.T) {

}

func BenchmarkSyncMap(b *testing.B) {
	var m sync.Map
	b.Run("single", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			now := time.Now()
			m.Store(now.String(), now)
		}
	})

	b.Run("parallel", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				now := time.Now()
				m.Store(now.String(), now)
			}
		})
	})

	m.Store("test", "test")
	b.Run("single-read", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			a, _ := m.Load("test")
			a = a
		}
	})
	b.Run("multi-read", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				a, _ := m.Load("test")
				a = a
			}
		})
	})
}

func BenchmarkXSyncMap(b *testing.B) {
	var m = xsync.NewMapOf[any]()
	b.Run("single", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			now := time.Now()
			m.Store(now.String(), now)
		}
	})

	b.Run("parallel", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				now := time.Now()
				m.Store(now.String(), now)
			}
		})
	})

	m.Store("test", "test")
	b.Run("single-read", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			a, _ := m.Load("test")
			a = a
		}
	})
	b.Run("multi-read", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				a, _ := m.Load("test")
				a = a
			}
		})
	})
}

func BenchmarkMapMap(b *testing.B) {
	var m = make(map[string]time.Time)

	b.Run("single", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			now := time.Now()
			m[now.String()] = now
		}
	})

	b.Run("multi", func(b *testing.B) {
		c := make(chan time.Time)
		defer close(c)
		go func() {
			for t := range c {
				m[t.String()] = t
			}
		}()

		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				c <- time.Now()
			}
		})
	})

	m["test"] = time.Now()
	b.Run("single-read", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			a, _ := m["test"]
			a = a
		}
	})

	b.Run("multi-read", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				a, _ := m["test"]
				a = a
			}
		})
	})
}

// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Ping {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Ping {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPing(bb:flatbuffers.ByteBuffer, obj?:Ping):Ping {
  return (obj || new Ping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPing(bb:flatbuffers.ByteBuffer, obj?:Ping):Ping {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * hostname is the client's detected hostname
 */
hostname():string|null
hostname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * identifier is the guid generated by pixie
 */
identifier():string|null
identifier(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
identifier(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPing(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHostname(builder:flatbuffers.Builder, hostnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hostnameOffset, 0);
}

static addIdentifier(builder:flatbuffers.Builder, identifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, identifierOffset, 0);
}

static endPing(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPing(builder:flatbuffers.Builder, hostnameOffset:flatbuffers.Offset, identifierOffset:flatbuffers.Offset):flatbuffers.Offset {
  Ping.startPing(builder);
  Ping.addHostname(builder, hostnameOffset);
  Ping.addIdentifier(builder, identifierOffset);
  return Ping.endPing(builder);
}
}

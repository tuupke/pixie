// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Ping } from '../packets/ping';


export class Register {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Register {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegister(bb:flatbuffers.ByteBuffer, obj?:Register):Register {
  return (obj || new Register()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegister(bb:flatbuffers.ByteBuffer, obj?:Register):Register {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Register()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

banner(obj?:Ping):Ping|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Ping()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

public(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

publicLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

publicArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

ips(index: number):string
ips(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ips(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ipsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRegister(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBanner(builder:flatbuffers.Builder, bannerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bannerOffset, 0);
}

static addPublic(builder:flatbuffers.Builder, publicOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, publicOffset, 0);
}

static createPublicVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPublicVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPublicVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPublicVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addIps(builder:flatbuffers.Builder, ipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ipsOffset, 0);
}

static createIpsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIpsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRegister(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRegisterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedRegisterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createRegister(builder:flatbuffers.Builder, bannerOffset:flatbuffers.Offset, publicOffset:flatbuffers.Offset, ipsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Register.startRegister(builder);
  Register.addBanner(builder, bannerOffset);
  Register.addPublic(builder, publicOffset);
  Register.addIps(builder, ipsOffset);
  return Register.endRegister(builder);
}
}

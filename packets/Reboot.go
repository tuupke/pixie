// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RebootT struct {
	In uint64
}

func (t *RebootT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	RebootStart(builder)
	RebootAddIn(builder, t.In)
	return RebootEnd(builder)
}

func (rcv *Reboot) UnPackTo(t *RebootT) {
	t.In = rcv.In()
}

func (rcv *Reboot) UnPack() *RebootT {
	if rcv == nil { return nil }
	t := &RebootT{}
	rcv.UnPackTo(t)
	return t
}

type Reboot struct {
	_tab flatbuffers.Table
}

func GetRootAsReboot(buf []byte, offset flatbuffers.UOffsetT) *Reboot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Reboot{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReboot(buf []byte, offset flatbuffers.UOffsetT) *Reboot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Reboot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Reboot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Reboot) Table() flatbuffers.Table {
	return rcv._tab
}

/// in depicts the time.Duration to wait before reboot. Defaults to 5s
func (rcv *Reboot) In() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 5000000000
}

/// in depicts the time.Duration to wait before reboot. Defaults to 5s
func (rcv *Reboot) MutateIn(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func RebootStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RebootAddIn(builder *flatbuffers.Builder, in uint64) {
	builder.PrependUint64Slot(0, in, 5000000000)
}
func RebootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

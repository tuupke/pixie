// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NotifyT struct {
	Header string
	Body string
}

func (t *NotifyT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	headerOffset := builder.CreateString(t.Header)
	bodyOffset := builder.CreateString(t.Body)
	NotifyStart(builder)
	NotifyAddHeader(builder, headerOffset)
	NotifyAddBody(builder, bodyOffset)
	return NotifyEnd(builder)
}

func (rcv *Notify) UnPackTo(t *NotifyT) {
	t.Header = string(rcv.Header())
	t.Body = string(rcv.Body())
}

func (rcv *Notify) UnPack() *NotifyT {
	if rcv == nil { return nil }
	t := &NotifyT{}
	rcv.UnPackTo(t)
	return t
}

type Notify struct {
	_tab flatbuffers.Table
}

func GetRootAsNotify(buf []byte, offset flatbuffers.UOffsetT) *Notify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Notify{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNotify(buf []byte, offset flatbuffers.UOffsetT) *Notify {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Notify{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Notify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Notify) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Notify) Header() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notify) Body() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func NotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NotifyAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(header), 0)
}
func NotifyAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(body), 0)
}
func NotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PowerT struct {
	Type PowerType
	In uint64
}

func (t *PowerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	PowerStart(builder)
	PowerAddType(builder, t.Type)
	PowerAddIn(builder, t.In)
	return PowerEnd(builder)
}

func (rcv *Power) UnPackTo(t *PowerT) {
	t.Type = rcv.Type()
	t.In = rcv.In()
}

func (rcv *Power) UnPack() *PowerT {
	if rcv == nil { return nil }
	t := &PowerT{}
	rcv.UnPackTo(t)
	return t
}

type Power struct {
	_tab flatbuffers.Table
}

func GetRootAsPower(buf []byte, offset flatbuffers.UOffsetT) *Power {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Power{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPower(buf []byte, offset flatbuffers.UOffsetT) *Power {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Power{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Power) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Power) Table() flatbuffers.Table {
	return rcv._tab
}

/// type is what this powerrequest requests of the server. Defaults to reboot
func (rcv *Power) Type() PowerType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return PowerType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 3
}

/// type is what this powerrequest requests of the server. Defaults to reboot
func (rcv *Power) MutateType(n PowerType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// in depicts the time.Duration to wait before reboot. Defaults to 5s
func (rcv *Power) In() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 5000000000
}

/// in depicts the time.Duration to wait before reboot. Defaults to 5s
func (rcv *Power) MutateIn(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func PowerStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PowerAddType(builder *flatbuffers.Builder, type_ PowerType) {
	builder.PrependInt8Slot(0, int8(type_), 3)
}
func PowerAddIn(builder *flatbuffers.Builder, in uint64) {
	builder.PrependUint64Slot(1, in, 5000000000)
}
func PowerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

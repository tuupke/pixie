// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Upsert struct {
	_tab flatbuffers.Table
}

func GetRootAsUpsert(buf []byte, offset flatbuffers.UOffsetT) *Upsert {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Upsert{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUpsert(buf []byte, offset flatbuffers.UOffsetT) *Upsert {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Upsert{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Upsert) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Upsert) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Upsert) Hostname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Upsert) Time() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Upsert) MutateTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func UpsertStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UpsertAddHostname(builder *flatbuffers.Builder, hostname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(hostname), 0)
}
func UpsertAddTime(builder *flatbuffers.Builder, time uint64) {
	builder.PrependUint64Slot(1, time, 0)
}
func UpsertEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

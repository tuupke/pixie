// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CommandT struct {
	Command *CmdT
	Time uint64
}

func (t *CommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	commandOffset := t.Command.Pack(builder)
	
	CommandStart(builder)
	if t.Command != nil {
		CommandAddCommandType(builder, t.Command.Type)
	}
	CommandAddCommand(builder, commandOffset)
	CommandAddTime(builder, t.Time)
	return CommandEnd(builder)
}

func (rcv *Command) UnPackTo(t *CommandT) {
	commandTable := flatbuffers.Table{}
	if rcv.Command(&commandTable) {
		t.Command = rcv.CommandType().UnPack(commandTable)
	}
	t.Time = rcv.Time()
}

func (rcv *Command) UnPack() *CommandT {
	if rcv == nil { return nil }
	t := &CommandT{}
	rcv.UnPackTo(t)
	return t
}

type Command struct {
	_tab flatbuffers.Table
}

func GetRootAsCommand(buf []byte, offset flatbuffers.UOffsetT) *Command {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Command{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCommand(buf []byte, offset flatbuffers.UOffsetT) *Command {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Command{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Command) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Command) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Command) CommandType() Cmd {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Cmd(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Command) MutateCommandType(n Cmd) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Command) Command(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Command) Time() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Command) MutateTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func CommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CommandAddCommandType(builder *flatbuffers.Builder, commandType Cmd) {
	builder.PrependByteSlot(0, byte(commandType), 0)
}
func CommandAddCommand(builder *flatbuffers.Builder, command flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(command), 0)
}
func CommandAddTime(builder *flatbuffers.Builder, time uint64) {
	builder.PrependUint64Slot(2, time, 0)
}
func CommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

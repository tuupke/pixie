// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SettingT struct {
	Key string
	Value string
}

func (t *SettingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := builder.CreateString(t.Key)
	valueOffset := builder.CreateString(t.Value)
	SettingStart(builder)
	SettingAddKey(builder, keyOffset)
	SettingAddValue(builder, valueOffset)
	return SettingEnd(builder)
}

func (rcv *Setting) UnPackTo(t *SettingT) {
	t.Key = string(rcv.Key())
	t.Value = string(rcv.Value())
}

func (rcv *Setting) UnPack() *SettingT {
	if rcv == nil { return nil }
	t := &SettingT{}
	rcv.UnPackTo(t)
	return t
}

type Setting struct {
	_tab flatbuffers.Table
}

func GetRootAsSetting(buf []byte, offset flatbuffers.UOffsetT) *Setting {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Setting{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSetting(buf []byte, offset flatbuffers.UOffsetT) *Setting {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Setting{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Setting) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Setting) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Setting) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Setting) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SettingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SettingAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func SettingAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func SettingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShellT struct {
	Command string
}

func (t *ShellT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	commandOffset := builder.CreateString(t.Command)
	ShellStart(builder)
	ShellAddCommand(builder, commandOffset)
	return ShellEnd(builder)
}

func (rcv *Shell) UnPackTo(t *ShellT) {
	t.Command = string(rcv.Command())
}

func (rcv *Shell) UnPack() *ShellT {
	if rcv == nil { return nil }
	t := &ShellT{}
	rcv.UnPackTo(t)
	return t
}

type Shell struct {
	_tab flatbuffers.Table
}

func GetRootAsShell(buf []byte, offset flatbuffers.UOffsetT) *Shell {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Shell{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShell(buf []byte, offset flatbuffers.UOffsetT) *Shell {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Shell{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Shell) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Shell) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Shell) Command() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ShellStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ShellAddCommand(builder *flatbuffers.Builder, command flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(command), 0)
}
func ShellEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

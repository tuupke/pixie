// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AnsibleT struct {
}

func (t *AnsibleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AnsibleStart(builder)
	return AnsibleEnd(builder)
}

func (rcv *Ansible) UnPackTo(t *AnsibleT) {
}

func (rcv *Ansible) UnPack() *AnsibleT {
	if rcv == nil { return nil }
	t := &AnsibleT{}
	rcv.UnPackTo(t)
	return t
}

type Ansible struct {
	_tab flatbuffers.Table
}

func GetRootAsAnsible(buf []byte, offset flatbuffers.UOffsetT) *Ansible {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ansible{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAnsible(buf []byte, offset flatbuffers.UOffsetT) *Ansible {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ansible{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Ansible) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ansible) Table() flatbuffers.Table {
	return rcv._tab
}

func AnsibleStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func AnsibleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

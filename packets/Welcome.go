// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WelcomeT struct {
	Banner *PingT
	HasTeam bool
	TeamId string
	TeamName string
}

func (t *WelcomeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	bannerOffset := t.Banner.Pack(builder)
	teamIdOffset := builder.CreateString(t.TeamId)
	teamNameOffset := builder.CreateString(t.TeamName)
	WelcomeStart(builder)
	WelcomeAddBanner(builder, bannerOffset)
	WelcomeAddHasTeam(builder, t.HasTeam)
	WelcomeAddTeamId(builder, teamIdOffset)
	WelcomeAddTeamName(builder, teamNameOffset)
	return WelcomeEnd(builder)
}

func (rcv *Welcome) UnPackTo(t *WelcomeT) {
	t.Banner = rcv.Banner(nil).UnPack()
	t.HasTeam = rcv.HasTeam()
	t.TeamId = string(rcv.TeamId())
	t.TeamName = string(rcv.TeamName())
}

func (rcv *Welcome) UnPack() *WelcomeT {
	if rcv == nil { return nil }
	t := &WelcomeT{}
	rcv.UnPackTo(t)
	return t
}

type Welcome struct {
	_tab flatbuffers.Table
}

func GetRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Welcome{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Welcome{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Welcome) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Welcome) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Welcome) Banner(obj *Ping) *Ping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Ping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Welcome) HasTeam() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Welcome) MutateHasTeam(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *Welcome) TeamId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Welcome) TeamName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func WelcomeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func WelcomeAddBanner(builder *flatbuffers.Builder, banner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(banner), 0)
}
func WelcomeAddHasTeam(builder *flatbuffers.Builder, hasTeam bool) {
	builder.PrependBoolSlot(1, hasTeam, false)
}
func WelcomeAddTeamId(builder *flatbuffers.Builder, teamId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(teamId), 0)
}
func WelcomeAddTeamName(builder *flatbuffers.Builder, teamName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(teamName), 0)
}
func WelcomeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

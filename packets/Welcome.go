// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WelcomeT struct {
	Identifier []int8
	Public []int8
}

func (t *WelcomeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	identifierOffset := flatbuffers.UOffsetT(0)
	if t.Identifier != nil {
		identifierLength := len(t.Identifier)
		WelcomeStartIdentifierVector(builder, identifierLength)
		for j := identifierLength - 1; j >= 0; j-- {
			builder.PrependInt8(t.Identifier[j])
		}
		identifierOffset = builder.EndVector(identifierLength)
	}
	publicOffset := flatbuffers.UOffsetT(0)
	if t.Public != nil {
		publicLength := len(t.Public)
		WelcomeStartPublicVector(builder, publicLength)
		for j := publicLength - 1; j >= 0; j-- {
			builder.PrependInt8(t.Public[j])
		}
		publicOffset = builder.EndVector(publicLength)
	}
	WelcomeStart(builder)
	WelcomeAddIdentifier(builder, identifierOffset)
	WelcomeAddPublic(builder, publicOffset)
	return WelcomeEnd(builder)
}

func (rcv *Welcome) UnPackTo(t *WelcomeT) {
	identifierLength := rcv.IdentifierLength()
	t.Identifier = make([]int8, identifierLength)
	for j := 0; j < identifierLength; j++ {
		t.Identifier[j] = rcv.Identifier(j)
	}
	publicLength := rcv.PublicLength()
	t.Public = make([]int8, publicLength)
	for j := 0; j < publicLength; j++ {
		t.Public[j] = rcv.Public(j)
	}
}

func (rcv *Welcome) UnPack() *WelcomeT {
	if rcv == nil { return nil }
	t := &WelcomeT{}
	rcv.UnPackTo(t)
	return t
}

type Welcome struct {
	_tab flatbuffers.Table
}

func GetRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Welcome{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Welcome{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Welcome) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Welcome) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Welcome) Identifier(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Welcome) IdentifierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Welcome) MutateIdentifier(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Welcome) Public(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Welcome) PublicLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Welcome) MutatePublic(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func WelcomeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WelcomeAddIdentifier(builder *flatbuffers.Builder, identifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(identifier), 0)
}
func WelcomeStartIdentifierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WelcomeAddPublic(builder *flatbuffers.Builder, public flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(public), 0)
}
func WelcomeStartPublicVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WelcomeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

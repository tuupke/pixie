// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Force a greeter layout
type GreeterT struct {
}

func (t *GreeterT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	GreeterStart(builder)
	return GreeterEnd(builder)
}

func (rcv *Greeter) UnPackTo(t *GreeterT) {
}

func (rcv *Greeter) UnPack() *GreeterT {
	if rcv == nil { return nil }
	t := &GreeterT{}
	rcv.UnPackTo(t)
	return t
}

type Greeter struct {
	_tab flatbuffers.Table
}

func GetRootAsGreeter(buf []byte, offset flatbuffers.UOffsetT) *Greeter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Greeter{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGreeter(buf []byte, offset flatbuffers.UOffsetT) *Greeter {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Greeter{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Greeter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Greeter) Table() flatbuffers.Table {
	return rcv._tab
}

func GreeterStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func GreeterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

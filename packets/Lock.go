// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LockT struct {
}

func (t *LockT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	LockStart(builder)
	return LockEnd(builder)
}

func (rcv *Lock) UnPackTo(t *LockT) {
}

func (rcv *Lock) UnPack() *LockT {
	if rcv == nil { return nil }
	t := &LockT{}
	rcv.UnPackTo(t)
	return t
}

type Lock struct {
	_tab flatbuffers.Table
}

func GetRootAsLock(buf []byte, offset flatbuffers.UOffsetT) *Lock {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Lock{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLock(buf []byte, offset flatbuffers.UOffsetT) *Lock {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Lock{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Lock) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Lock) Table() flatbuffers.Table {
	return rcv._tab
}

func LockStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func LockEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

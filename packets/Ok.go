// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OkT struct {
}

func (t *OkT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	OkStart(builder)
	return OkEnd(builder)
}

func (rcv *Ok) UnPackTo(t *OkT) {
}

func (rcv *Ok) UnPack() *OkT {
	if rcv == nil { return nil }
	t := &OkT{}
	rcv.UnPackTo(t)
	return t
}

type Ok struct {
	_tab flatbuffers.Table
}

func GetRootAsOk(buf []byte, offset flatbuffers.UOffsetT) *Ok {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ok{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOk(buf []byte, offset flatbuffers.UOffsetT) *Ok {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ok{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Ok) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ok) Table() flatbuffers.Table {
	return rcv._tab
}

func OkStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func OkEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

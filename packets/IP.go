// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IPT struct {
	Ip string
	Netmask int32
	Name string
	Mac string
}

func (t *IPT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ipOffset := builder.CreateString(t.Ip)
	nameOffset := builder.CreateString(t.Name)
	macOffset := builder.CreateString(t.Mac)
	IPStart(builder)
	IPAddIp(builder, ipOffset)
	IPAddNetmask(builder, t.Netmask)
	IPAddName(builder, nameOffset)
	IPAddMac(builder, macOffset)
	return IPEnd(builder)
}

func (rcv *IP) UnPackTo(t *IPT) {
	t.Ip = string(rcv.Ip())
	t.Netmask = rcv.Netmask()
	t.Name = string(rcv.Name())
	t.Mac = string(rcv.Mac())
}

func (rcv *IP) UnPack() *IPT {
	if rcv == nil { return nil }
	t := &IPT{}
	rcv.UnPackTo(t)
	return t
}

type IP struct {
	_tab flatbuffers.Table
}

func GetRootAsIP(buf []byte, offset flatbuffers.UOffsetT) *IP {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IP{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIP(buf []byte, offset flatbuffers.UOffsetT) *IP {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IP{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IP) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IP) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IP) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IP) Netmask() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IP) MutateNetmask(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *IP) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IP) Mac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func IPStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IPAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ip), 0)
}
func IPAddNetmask(builder *flatbuffers.Builder, netmask int32) {
	builder.PrependInt32Slot(1, netmask, 0)
}
func IPAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func IPAddMac(builder *flatbuffers.Builder, mac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mac), 0)
}
func IPEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BannerT struct {
	Hostname string
	Identifier string
}

func (t *BannerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	hostnameOffset := builder.CreateString(t.Hostname)
	identifierOffset := builder.CreateString(t.Identifier)
	BannerStart(builder)
	BannerAddHostname(builder, hostnameOffset)
	BannerAddIdentifier(builder, identifierOffset)
	return BannerEnd(builder)
}

func (rcv *Banner) UnPackTo(t *BannerT) {
	t.Hostname = string(rcv.Hostname())
	t.Identifier = string(rcv.Identifier())
}

func (rcv *Banner) UnPack() *BannerT {
	if rcv == nil { return nil }
	t := &BannerT{}
	rcv.UnPackTo(t)
	return t
}

type Banner struct {
	_tab flatbuffers.Table
}

func GetRootAsBanner(buf []byte, offset flatbuffers.UOffsetT) *Banner {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Banner{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBanner(buf []byte, offset flatbuffers.UOffsetT) *Banner {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Banner{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Banner) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Banner) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Banner) Hostname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Banner) Identifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BannerStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BannerAddHostname(builder *flatbuffers.Builder, hostname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(hostname), 0)
}
func BannerAddIdentifier(builder *flatbuffers.Builder, identifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(identifier), 0)
}
func BannerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd byte

const (
	CmdNONE     Cmd = 0
	CmdReboot   Cmd = 1
	CmdLogout   Cmd = 2
	CmdLock     Cmd = 3
	CmdShutdown Cmd = 4
	CmdAnsible  Cmd = 5
	CmdNotify   Cmd = 6
)

var EnumNamesCmd = map[Cmd]string{
	CmdNONE:     "NONE",
	CmdReboot:   "Reboot",
	CmdLogout:   "Logout",
	CmdLock:     "Lock",
	CmdShutdown: "Shutdown",
	CmdAnsible:  "Ansible",
	CmdNotify:   "Notify",
}

var EnumValuesCmd = map[string]Cmd{
	"NONE":     CmdNONE,
	"Reboot":   CmdReboot,
	"Logout":   CmdLogout,
	"Lock":     CmdLock,
	"Shutdown": CmdShutdown,
	"Ansible":  CmdAnsible,
	"Notify":   CmdNotify,
}

func (v Cmd) String() string {
	if s, ok := EnumNamesCmd[v]; ok {
		return s
	}
	return "Cmd(" + strconv.FormatInt(int64(v), 10) + ")"
}

type CmdT struct {
	Type Cmd
	Value interface{}
}

func (t *CmdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case CmdReboot:
		return t.Value.(*RebootT).Pack(builder)
	case CmdLogout:
		return t.Value.(*LogoutT).Pack(builder)
	case CmdLock:
		return t.Value.(*LockT).Pack(builder)
	case CmdShutdown:
		return t.Value.(*ShutdownT).Pack(builder)
	case CmdAnsible:
		return t.Value.(*AnsibleT).Pack(builder)
	case CmdNotify:
		return t.Value.(*NotifyT).Pack(builder)
	}
	return 0
}

func (rcv Cmd) UnPack(table flatbuffers.Table) *CmdT {
	switch rcv {
	case CmdReboot:
		x := Reboot{_tab: table}
		return &CmdT{ Type: CmdReboot, Value: x.UnPack() }
	case CmdLogout:
		x := Logout{_tab: table}
		return &CmdT{ Type: CmdLogout, Value: x.UnPack() }
	case CmdLock:
		x := Lock{_tab: table}
		return &CmdT{ Type: CmdLock, Value: x.UnPack() }
	case CmdShutdown:
		x := Shutdown{_tab: table}
		return &CmdT{ Type: CmdShutdown, Value: x.UnPack() }
	case CmdAnsible:
		x := Ansible{_tab: table}
		return &CmdT{ Type: CmdAnsible, Value: x.UnPack() }
	case CmdNotify:
		x := Notify{_tab: table}
		return &CmdT{ Type: CmdNotify, Value: x.UnPack() }
	}
	return nil
}

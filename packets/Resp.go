// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Resp byte

const (
	RespNONE     Resp = 0
	RespRegister Resp = 1
)

var EnumNamesResp = map[Resp]string{
	RespNONE:     "NONE",
	RespRegister: "Register",
}

var EnumValuesResp = map[string]Resp{
	"NONE":     RespNONE,
	"Register": RespRegister,
}

func (v Resp) String() string {
	if s, ok := EnumNamesResp[v]; ok {
		return s
	}
	return "Resp(" + strconv.FormatInt(int64(v), 10) + ")"
}

type RespT struct {
	Type Resp
	Value interface{}
}

func (t *RespT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case RespRegister:
		return t.Value.(*RegisterT).Pack(builder)
	}
	return 0
}

func (rcv Resp) UnPack(table flatbuffers.Table) *RespT {
	switch rcv {
	case RespRegister:
		x := Register{_tab: table}
		return &RespT{ Type: RespRegister, Value: x.UnPack() }
	}
	return nil
}

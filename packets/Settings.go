// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package packets

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SettingsT struct {
	Settings []*SettingT
}

func (t *SettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	settingsOffset := flatbuffers.UOffsetT(0)
	if t.Settings != nil {
		settingsLength := len(t.Settings)
		settingsOffsets := make([]flatbuffers.UOffsetT, settingsLength)
		for j := 0; j < settingsLength; j++ {
			settingsOffsets[j] = t.Settings[j].Pack(builder)
		}
		SettingsStartSettingsVector(builder, settingsLength)
		for j := settingsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(settingsOffsets[j])
		}
		settingsOffset = builder.EndVector(settingsLength)
	}
	SettingsStart(builder)
	SettingsAddSettings(builder, settingsOffset)
	return SettingsEnd(builder)
}

func (rcv *Settings) UnPackTo(t *SettingsT) {
	settingsLength := rcv.SettingsLength()
	t.Settings = make([]*SettingT, settingsLength)
	for j := 0; j < settingsLength; j++ {
		x := Setting{}
		rcv.Settings(&x, j)
		t.Settings[j] = x.UnPack()
	}
}

func (rcv *Settings) UnPack() *SettingsT {
	if rcv == nil { return nil }
	t := &SettingsT{}
	rcv.UnPackTo(t)
	return t
}

type Settings struct {
	_tab flatbuffers.Table
}

func GetRootAsSettings(buf []byte, offset flatbuffers.UOffsetT) *Settings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Settings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSettings(buf []byte, offset flatbuffers.UOffsetT) *Settings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Settings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Settings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Settings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Settings) Settings(obj *Setting, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Settings) SettingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SettingsAddSettings(builder *flatbuffers.Builder, settings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(settings), 0)
}
func SettingsStartSettingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
